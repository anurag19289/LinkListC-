using System;
using System.Collections;
using System.Collections.Generic;

namespace LinkList
{
 
    public class Stack<T> : IEnumerable<T>
    {
        System.Collections.Generic.LinkedList<T> _list = new System.Collections.Generic.LinkedList<T>();

        public void Push(T item)
        {
            _list.AddFirst(item);
        }

        public T Pop()
        {
            if (_list.Count == 0)
            {
                throw new InvalidOperationException("Stack is Empty");
            }
            T poppedValue = _list.First.Value;
            _list.RemoveFirst();
            return poppedValue;

        }

        public T Peek()
        {
            if (_list.Count == 0)
            {
                throw new InvalidOperationException("Stack is Empty");
            }
            return _list.First.Value;
        }


        public int Count
        {
            get
            {
                return _list.Count;
            }
        }

        public void Clear()
        {
            _list.Clear();
        }
        public IEnumerator<T> GetEnumerator()
        {
            return _list.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _list.GetEnumerator();
        }
    }
}



//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

//namespace LinkList
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {
//            Stack<int> stack = new Stack<int>();
//            stack.Push(1);
//            stack.Push(100);
//            stack.Push(200);
//            stack.Push(500);
//            stack.Push(150);

//            foreach (var item in stack)
//            {
//                Console.WriteLine(item);
//            }

//            Console.ReadLine();
//        }
//    }
//}
