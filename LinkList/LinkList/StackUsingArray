using System;
using System.Collections;
using System.Collections.Generic;

namespace LinkList
{
    public class Stack<T> : IEnumerable<T>
    {
        T[] _items = new T[0]; //size is 0 initially will grow as we push more items

        public int _size; //current num of items in the stack

        public void Push(T item)
        {
            if (_items.Length == _size)
            {
                int newArrayLength = _size == 0 ? 4 : _size * 2;
                T[] newArray = new T[newArrayLength];
                _items.CopyTo(newArray, 0);
                _items = newArray;
            }

            _items[_size] = item;
            _size++;
        }

        public T Pop()
        {
            if (_size == 0)
            {
                throw new InvalidOperationException("Stack is Empty");
            }
            _size--;
            return _items[_size];
        }

        public T Peek()
        {
            if (_size == 0)
            {
                throw new InvalidOperationException("Stack is Empty");
            }
            return _items[_size - 1];
        }

        public int Count
        {
            get
            {
                return _size;
            }
        }
        public void Clear()
        {
            _size = 0; 
            // setting size to zero doesnt clear the array 
            // For integers its fine
            // But if this array contained disposable object 
            // Objects that has finalizer 
            // leaving them in the array could keep reference to them alive
            // 
        }
        public IEnumerator<T> GetEnumerator()
        {
            for (int i = _items.Length; i >= 0; i--)
            {
                yield return _items[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}

//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

//namespace LinkList
//{
//    class Program
//    {
//        static void Main(string[] args)
//        {
//            Stack<int> stack = new Stack<int>();

//            stack.Push(10);
//            stack.Push(100);
//            stack.Push(1000);
//            stack.Push(10000);
//            stack.Push(100000);



//            Console.ReadLine();
//        }
//    }
//}
